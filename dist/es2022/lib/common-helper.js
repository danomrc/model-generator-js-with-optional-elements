import { parse } from 'path';
import { libMetadata } from './meta/index.js';
export class CommonHelper {
    sortAlphabetically(arrayToSort, propertySelector) {
        return arrayToSort.sort((a, b) => propertySelector(a).toLowerCase().localeCompare(propertySelector(b).toLowerCase()));
    }
    getAutogenerateNote(addTimestamp) {
        if (addTimestamp) {
            return `Generated by '${libMetadata.name}@${libMetadata.version}' at '${new Date().toUTCString()}'`;
        }
        return `Generated by '${libMetadata.name}@${libMetadata.version}'`;
    }
    getElementCodename(element) {
        const codename = element['codename'];
        return codename ?? undefined;
    }
    isElementRequired(element) {
        const isRequired = element['is_required'];
        return isRequired === true;
    }
    getElementGuidelines(element) {
        const guidelines = element['guidelines'];
        if (!guidelines) {
            return null;
        }
        return guidelines;
    }
    getImportStatement(data) {
        let resolvedFilePath;
        if (data.moduleResolution === 'nodeNext' && !data.isExternalLib) {
            resolvedFilePath = `${data.filePath}.js`;
        }
        else {
            resolvedFilePath = data.filePath;
        }
        return `import { ${data.importValue} } from '${resolvedFilePath}';`;
    }
    getElementTitle(element, taxonomies) {
        if (element.type === 'taxonomy') {
            const taxonomyElement = element;
            const taxonomyGroupId = taxonomyElement?.taxonomy_group?.id;
            if (!taxonomyGroupId) {
                return element.type;
            }
            const taxonomy = taxonomies.find((m) => m.id === taxonomyGroupId);
            if (!taxonomy) {
                return element.type;
            }
            return taxonomy.name;
        }
        return element['name'];
    }
    getBarrelExportCode(data) {
        let code = '';
        if (data.filenames.length) {
            for (let i = 0; i < data.filenames.length; i++) {
                const isLast = i === data.filenames.length - 1;
                const filename = data.filenames[i];
                const path = parse(filename);
                const extension = data.moduleResolution === 'nodeNext' ? '.js' : '';
                code += `export * from '${path.dir}/${path.name}${extension}'`;
                if (!isLast) {
                    code += `\n`;
                }
            }
        }
        else {
            code = `export {}`;
        }
        return code;
    }
    escapeNameValue(value) {
        return value.replaceAll(`'`, `\\'`);
    }
}
export const commonHelper = new CommonHelper();
//# sourceMappingURL=common-helper.js.map